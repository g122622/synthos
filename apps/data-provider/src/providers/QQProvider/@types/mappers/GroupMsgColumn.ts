/**
 * QQNT 群聊消息表（group_msg_table）字段列编号枚举
 *
 * 数据来源：
 * - [学习笔记 | QQNT 聊天记录导出](https://blog.reincarnatey.net/2024/0707-qqnt-history-export/)
 * - [GroupChatAnnualReport](https://github.com/mobyw/GroupChatAnnualReport)
 *
 * 注：所有时间戳均为 UTC+8（中国标准时间）
 */
export enum GroupMsgColumn {
    /**
     * 消息ID，具有唯一性
     */
    msgId = 40001,

    /**
     * 消息随机值，用于对消息去重
     */
    msgRandom = 40002,

    /**
     * 群聊消息ID，在每个聊天中依次递增
     */
    msgSeq = 40003,

    /**
     * 聊天类型：
     * - 1：私聊
     * - 2：群聊
     * - 4：频道
     * - 103：公众号
     * - 102：企业客服
     * - 100：临时会话
     */
    chatType = 40010,

    /**
     * 消息类型，具体值含义需参考官方或社区解析文档（如文本、图片、语音等）
     * 详见原文中的“40011部分值信息解读”部分
     */
    msgType = 40011,

    /**
     * pb消息类型（Protocol Buffer 子类型），用于进一步区分消息内容结构
     * 详见原文中的“40012部分值信息解读”部分
     */
    subMsgType = 40012,

    /**
     * 发送标志：
     * - 0：别人发送的消息
     * - 1：本机发送的消息
     * - 2：其他客户端发送的消息（如同账号在手机端发送）
     * - 5：转发消息
     * - 若群已退出或被封禁，此字段可能为当日整点时间戳（单位：秒）
     */
    sendType = 40013,

    /**
     * 发送者的 nt_uid（内部用户ID），需通过 `nt_uid_mapping_table` 表映射为实际 QQ 号或可读标识
     */
    senderuid = 40020,

    /**
     * 会话ID（字符串形式），用于标识聊天对象（如群号字符串、好友 nt_uid 等）
     */
    peeruid = 40021,

    /**
     * 会话ID（整数形式），通常为群号或好友 QQ 号的数字表示
     */
    peeruin = 40027,

    /**
     * 消息发送状态：
     * - 0：发送被阻止（如不是对方好友）
     * - 1：尚未发送成功（如网络问题）
     * - 2：发送成功
     * - 3：消息被和谐（内容违规）
     */
    sendStatus = 40041,

    /**
     * 消息发送时间的完整时间戳（单位：秒，时区为 GMT+0800 / UTC+8）
     */
    msgTime = 40050,

    /**
     * 发送者在群中的群名片（显示名称）：
     * - 在旧版 QQ 迁移数据中，格式可能为 `name(12345)` 或 `name<i@example.com>`
     * - 在 QQNT 中，直接存储当前群名片（纯字符串）
     */
    sendMemberName = 40090,

    /**
     * 发送者昵称：
     * - 旧版 QQ 中此字段通常为空
     * - QQNT 中仅在用户未设置群名片时才会填充此字段
     */
    sendNickName = 40093,

    /**
     * 聊天消息主体内容，以 Protocol Buffer（protobuf）格式存储，结构最为复杂
     * 包含文本、图片、表情、文件等具体消息元素，需解析 protobuf 才能获取可读内容
     */
    msgContent = 40800,

    /**
     * 附加数据字段，内容结构依赖 `msgType`（即列 40011 的值）：
     * - 当 `msgType` 为 8 时：存储转发聊天的缓存数据
     * - 当 `msgType` 为 9 时：存储被引用（回复）的原始消息数据
     * 同样为 protobuf 格式
     */
    extraData = 40900,

    /**
     * 用途不明，但观察到“自己发送的消息有一定概率存在非零数值”，正常情况下为 0
     */
    unknown40005 = 40005,

    /**
     * 当日 0 点整的时间戳（单位：秒，时区为 GMT+0800）
     * 用于按天分组或归档消息
     */
    dayTimestamp = 40058,

    /**
     * 可能为消息元素（elem）的 ID，但具体用途尚未明确
     */
    elemId = 40006,

    /**
     * @状态（是否被 @）：
     * 具体取值含义需参考原文“40100值解读”部分，通常用于标识消息中是否包含 @ 自己或全体成员
     */
    atStatus = 40100,

    /**
     * 状态标志字段，以 Protocol Buffer 格式存储
     * 可能包含消息的附加状态信息（如撤回、编辑、已读等）
     * 详见原文“40600值解读”部分
     */
    statusFlag = 40600,

    /**
     * 已退出或已解散的群聊标志：
     * 若消息来自一个当前已退出或已解散的群，此字段可能被设置（具体值含义待进一步确认）
     */
    exitedOrDismissed = 40060,

    /**
     * 回复消息序号：表示该消息所回复的原始消息的 `msgSeq`（即列 40003 的值）
     * 用于构建消息回复链
     */
    replyMsgSeq = 40850,

    /**
     * 无法理解的 protobuf 字段，用途尚未解析
     */
    unknown40801 = 40801,

    /**
     * 群号（整数形式），由 QQNT 直接保存
     * 与 `peeruin` 在群聊场景下通常一致
     */
    groupUin = 40030,

    /**
     * 发送者的 QQ 号（整数），由 QQNT 直接保存
     * 可直接用于标识用户，无需查映射表
     */
    senderUin = 40033,

    /**
     * 表态（Reaction）详细信息，以 Protocol Buffer 格式存储
     * 包含用户对消息添加的表情及对应数量
     * 表情编号与 [QQBOT 表情 API](https://bot.q.qq.com/wiki/develop/api-v2/openapi/emoji/model.html) 中的编号一致
     * 注意：超级表情（如“拍一拍”类）不在此列表中
     */
    emojiReactions = 40062,

    /**
     * 表态表情数量总和（字段1）：
     * 可能表示所有表态的总次数，或某种聚合计数
     * 与 `emojiReactions` 字段配合使用
     */
    reactionCount1 = 40083,

    /**
     * 表态表情数量总和（字段2）：
     * 作用与 `reactionCount1` 类似，可能用于冗余校验或不同维度统计
     * 具体差异尚不明确
     */
    reactionCount2 = 40084
}
